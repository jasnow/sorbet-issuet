# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

class Array
  include(::MessagePack::CoreExt)
  include(::JSON::Ext::Generator::GeneratorMethods::Array)
  include(::Enumerable)


  private

  def to_msgpack_with_packer(packer); end
end

Bignum = Integer

class FalseClass
  include(::MessagePack::CoreExt)
  include(::JSON::Ext::Generator::GeneratorMethods::FalseClass)


  private

  def to_msgpack_with_packer(packer); end
end

class Float < ::Numeric
  include(::MessagePack::CoreExt)
  include(::JSON::Ext::Generator::GeneratorMethods::Float)


  private

  def to_msgpack_with_packer(packer); end
end

Float::DIG = T.let(T.unsafe(nil), Integer)

Float::EPSILON = T.let(T.unsafe(nil), Float)

Float::INFINITY = T.let(T.unsafe(nil), Float)

Float::MANT_DIG = T.let(T.unsafe(nil), Integer)

Float::MAX = T.let(T.unsafe(nil), Float)

Float::MAX_10_EXP = T.let(T.unsafe(nil), Integer)

Float::MAX_EXP = T.let(T.unsafe(nil), Integer)

Float::MIN = T.let(T.unsafe(nil), Float)

Float::MIN_10_EXP = T.let(T.unsafe(nil), Integer)

Float::MIN_EXP = T.let(T.unsafe(nil), Integer)

Float::NAN = T.let(T.unsafe(nil), Float)

Float::RADIX = T.let(T.unsafe(nil), Integer)

Float::ROUNDS = T.let(T.unsafe(nil), Integer)

class Hash
  include(::MessagePack::CoreExt)
  include(::JSON::Ext::Generator::GeneratorMethods::Hash)
  include(::Enumerable)


  private

  def to_msgpack_with_packer(packer); end
end

class Integer < ::Numeric
  include(::MessagePack::CoreExt)
  include(::JSON::Ext::Generator::GeneratorMethods::Integer)


  private

  def to_msgpack_with_packer(packer); end
end

Integer::GMP_VERSION = T.let(T.unsafe(nil), String)

module MessagePack

  private

  def dump(v, *rest); end
  def load(src, param = _); end
  def pack(v, *rest); end
  def unpack(src, param = _); end

  def self.dump(v, *rest); end
  def self.load(src, param = _); end
  def self.pack(v, *rest); end
  def self.unpack(src, param = _); end
end

module MessagePack::CoreExt
  def to_msgpack(packer_or_io = _); end
end

MessagePack::DEFAULT_EMPTY_PARAMS = T.let(T.unsafe(nil), Hash)

MessagePack::DefaultFactory = T.let(T.unsafe(nil), MessagePack::Factory)

class MessagePack::ExtensionValue < ::Struct
  include(::MessagePack::CoreExt)

  def payload=(_); end
  def type=(_); end

  private

  def to_msgpack_with_packer(packer); end
end

class MessagePack::Factory
  def dump(v, *rest); end
  def load(src, param = _); end
  def pack(v, *rest); end
  def registered_types(selector = _); end
  def type_registered?(klass_or_type, selector = _); end
  def unpack(src, param = _); end
end

class MessagePack::Packer
  def registered_types; end
  def type_registered?(klass_or_type); end
end

module MessagePack::Time
end

MessagePack::Time::Packer = T.let(T.unsafe(nil), Proc)

MessagePack::Time::TIME_AT_3_AVAILABLE = T.let(T.unsafe(nil), TrueClass)

MessagePack::Time::Unpacker = T.let(T.unsafe(nil), Proc)

class MessagePack::Timestamp
  def initialize(sec, nsec); end

  def ==(other); end
  def nsec; end
  def sec; end
  def to_msgpack_ext; end

  def self.from_msgpack_ext(data); end
  def self.to_msgpack_ext(sec, nsec); end
end

MessagePack::Timestamp::TIMESTAMP32_MAX_SEC = T.let(T.unsafe(nil), Integer)

MessagePack::Timestamp::TIMESTAMP64_MAX_SEC = T.let(T.unsafe(nil), Integer)

MessagePack::Timestamp::TYPE = T.let(T.unsafe(nil), Integer)

class MessagePack::Unpacker
  def registered_types; end
  def type_registered?(klass_or_type); end
end

MessagePack::VERSION = T.let(T.unsafe(nil), String)

class NilClass
  include(::MessagePack::CoreExt)
  include(::JSON::Ext::Generator::GeneratorMethods::NilClass)


  private

  def to_msgpack_with_packer(packer); end
end

class String
  include(::MessagePack::CoreExt)
  include(::JSON::Ext::Generator::GeneratorMethods::String)
  include(::Comparable)
  extend(::JSON::Ext::Generator::GeneratorMethods::String::Extend)


  private

  def to_msgpack_with_packer(packer); end
end

String::BLANK_RE = T.let(T.unsafe(nil), Regexp)

String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)

class Symbol
  include(::MessagePack::CoreExt)
  include(::Comparable)

  def to_msgpack_ext; end

  private

  def to_msgpack_with_packer(packer); end

  def self.from_msgpack_ext(data); end
end

class TrueClass
  include(::MessagePack::CoreExt)
  include(::JSON::Ext::Generator::GeneratorMethods::TrueClass)


  private

  def to_msgpack_with_packer(packer); end
end
