# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: strong

module Spring
  def self.after_fork(&block); end
  def self.after_fork_callbacks; end
  def self.application_root; end
  def self.application_root=(_); end
  def self.application_root_path; end
  def self.gemfile; end
  def self.project_root_path; end
  def self.quiet; end
  def self.quiet=(_); end
  def self.verify_environment; end
  def self.watch(*items); end
  def self.watch_interval; end
  def self.watch_interval=(_); end
  def self.watch_method; end
  def self.watch_method=(method); end
  def self.watcher; end
  def self.watcher=(_); end
end

class Spring::ClientError < ::StandardError
end

class Spring::CommandNotFound < ::Spring::ClientError
end

class Spring::MissingApplication < ::Spring::ClientError
  def initialize(project_root); end

  def message; end
  def project_root; end
end

class Spring::UnknownProject < ::StandardError
  def initialize(current_dir); end

  def current_dir; end
  def message; end
end

module Spring::Watcher
end

class Spring::Watcher::Abstract
  include(::Mutex_m)

  def initialize(root, latency); end

  def add(*items); end
  def debug; end
  def directories; end
  def files; end
  def latency; end
  def lock; end
  def locked?; end
  def mark_stale; end
  def on_debug(&block); end
  def on_stale(&block); end
  def restart; end
  def root; end
  def stale?; end
  def start; end
  def stop; end
  def subjects_changed; end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
end

class Spring::Watcher::Polling < ::Spring::Watcher::Abstract
  def initialize(root, latency); end

  def add(*_); end
  def check_stale; end
  def mtime; end
  def running?; end
  def start; end
  def stop; end
  def subjects_changed; end

  private

  def compute_mtime; end
  def expanded_files; end
end
